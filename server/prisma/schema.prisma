// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transactions Transaction[]
  budgets      Budget[]
  goals        Goal[]

  @@map("users")
}

model Transaction {
  id          String      @id @default(cuid())
  amount      Float
  description String
  category    String
  type        String      // "INCOME" or "EXPENSE"
  date        DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Foreign Keys
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Budget {
  id              String   @id @default(cuid())
  name            String
  month           DateTime
  totalLimit      Float
  categories      BudgetCategory[]
  rolloverEnabled Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Foreign Keys
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month])
  @@map("budgets")
}

model BudgetCategory {
  id               String  @id @default(cuid())
  category         String
  budgetedAmount   Float
  spentAmount      Float   @default(0)
  alertThreshold   Float   @default(0.8) // 80% by default

  // Foreign Keys
  budgetId         String
  budget           Budget  @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@unique([budgetId, category])
  @@map("budget_categories")
}

model Goal {
  id          String   @id @default(cuid())
  title       String
  description String?
  targetAmount Float
  currentAmount Float   @default(0)
  targetDate  DateTime?
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign Keys
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}